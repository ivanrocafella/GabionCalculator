// <auto-generated />
using System;
using GabionCalculator.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GabionCalculator.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230613042121_Adding new table CostWork")]
    partial class AddingnewtableCostWork
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GabionCalculator.DAL.Entities.CostWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("ExchangeDollar")
                        .HasColumnType("double")
                        .HasAnnotation("Relational:JsonPropertyName", "ExchangeDollar");

                    b.Property<double>("Margin")
                        .HasColumnType("double")
                        .HasAnnotation("Relational:JsonPropertyName", "Margin");

                    b.Property<double>("PNR")
                        .HasColumnType("double")
                        .HasAnnotation("Relational:JsonPropertyName", "PNR");

                    b.Property<double>("TimeSettingEguip")
                        .HasColumnType("double")
                        .HasAnnotation("Relational:JsonPropertyName", "TimeSettingEguip");

                    b.Property<double>("TimeWeldingOneCrossBar")
                        .HasColumnType("double")
                        .HasAnnotation("Relational:JsonPropertyName", "TimeWeldingOneCrossBar");

                    b.HasKey("Id");

                    b.ToTable("CostWorks");
                });

            modelBuilder.Entity("GabionCalculator.DAL.Entities.Gabion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<double>("BatchPrice")
                        .HasColumnType("double")
                        .HasAnnotation("Relational:JsonPropertyName", "BatchPrice");

                    b.Property<double>("BatchSebes")
                        .HasColumnType("double")
                        .HasAnnotation("Relational:JsonPropertyName", "BatchSebes");

                    b.Property<int>("CellHeight")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "CellHeight");

                    b.Property<int>("CellWidth")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "CellWidth");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime(6)")
                        .HasAnnotation("Relational:JsonPropertyName", "DateStart");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime(6)")
                        .HasAnnotation("Relational:JsonPropertyName", "DateUpdate");

                    b.Property<int>("Height")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "Height");

                    b.Property<int>("Length")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "Length");

                    b.Property<float>("MaterialDiameter")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "MaterialDiameter");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "MaterialId");

                    b.Property<string>("MaterialJson")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "MaterialJson");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasAnnotation("Relational:JsonPropertyName", "Price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "Quantity");

                    b.Property<double>("Sebes")
                        .HasColumnType("double")
                        .HasAnnotation("Relational:JsonPropertyName", "Sebes");

                    b.Property<string>("Svg")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "Svg");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "UserId");

                    b.Property<string>("UserJson")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "UserJson");

                    b.Property<int>("Width")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "Width");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UserId");

                    b.ToTable("Gabions");

                    b.HasAnnotation("Relational:JsonPropertyName", "Gabions");
                });

            modelBuilder.Entity("GabionCalculator.DAL.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime(6)")
                        .HasAnnotation("Relational:JsonPropertyName", "DateStart");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime(6)")
                        .HasAnnotation("Relational:JsonPropertyName", "DateUpdate");

                    b.Property<int>("MaterialKind")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "MaterialKind");

                    b.Property<int>("MaterialKindId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "MaterialKindId");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "Name");

                    b.Property<double>("PricePerKg")
                        .HasColumnType("double")
                        .HasAnnotation("Relational:JsonPropertyName", "PricePerKg");

                    b.Property<float>("Size")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "Size");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.HasAnnotation("Relational:JsonPropertyName", "Material");
                });

            modelBuilder.Entity("GabionCalculator.DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("Relational:JsonPropertyName", "Email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("Relational:JsonPropertyName", "EmailConfirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("Relational:JsonPropertyName", "LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasAnnotation("Relational:JsonPropertyName", "LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("Relational:JsonPropertyName", "NormalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("Relational:JsonPropertyName", "NormalizedUserName");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("Relational:JsonPropertyName", "PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("Relational:JsonPropertyName", "TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("Relational:JsonPropertyName", "UserName");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GabionCalculator.DAL.Entities.Gabion", b =>
                {
                    b.HasOne("GabionCalculator.DAL.Entities.Material", "Material")
                        .WithMany("Gabions")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GabionCalculator.DAL.Entities.User", "User")
                        .WithMany("Gabions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Material");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GabionCalculator.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GabionCalculator.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GabionCalculator.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GabionCalculator.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GabionCalculator.DAL.Entities.Material", b =>
                {
                    b.Navigation("Gabions");
                });

            modelBuilder.Entity("GabionCalculator.DAL.Entities.User", b =>
                {
                    b.Navigation("Gabions");
                });
#pragma warning restore 612, 618
        }
    }
}
